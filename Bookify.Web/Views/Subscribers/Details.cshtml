@using Bookify.Contracts.ViewModels.Subscriber
@model SubscriberViewModel

@{
    ViewData["Title"] = "Subscriber Details";
}

<div class="alert bg-light-primary border border-primary border-3 border-dashed d-flex justify-content-between w-100 p-5 mb-10">
    <div class="d-flex align-items-center">
        <div class="symbol symbol-40px me-4">
            <div class="symbol-label fs-2 fw-semibold text-success">
                <span class="svg-icon svg-icon-2 svg-icon-primary">
                    <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                        <path d="M6.28548 15.0861C7.34369 13.1814 9.35142 12 11.5304 12H12.4696C14.6486 12 16.6563 13.1814 17.7145 15.0861L19.3493 18.0287C20.0899 19.3618 19.1259 21 17.601 21H6.39903C4.87406 21 3.91012 19.3618 4.65071 18.0287L6.28548 15.0861Z" fill="currentColor" />
                        <rect opacity="0.3" x="8" y="3" width="8" height="8" rx="4" fill="currentColor" />
                    </svg>
                </span>
            </div>
        </div>
        <div class="d-flex flex-column pe-0 pe-sm-10">
            <h5 class="mb-1">Subscriber Details</h5>
        </div>
    </div>
    <div>
        <a class="btn btn-sm btn-primary" asp-action="Edit" asp-route-id="@Model.Id">
            <i class="bi bi-pencil-square"></i> Edit
        </a>
    </div>
</div>

<div class="d-flex flex-column flex-xl-row">
    <div class="flex-column flex-lg-row-auto w-100 w-xl-350px mb-10">
        <div class="card mb-5 mb-xl-8">
            <div class="card-body pt-15">
                <div class="d-flex flex-center flex-column mb-5">
                    <p class="fs-3 text-gray-800 text-hover-primary fw-bold mb-1">@Model.FullName</p>
                    <p class="fs-5 fw-semibold text-muted text-hover-primary mb-6">@Model.Email</p>
                </div>
                <div class="d-flex flex-stack fs-4 py-3">
                    <div class="fw-bold">Details</div>
                    <div class="badge badge-light-@(Model.IsBlackListed ? "danger" : "success")">
                        @(Model.IsBlackListed ? "Blacklisted" : "Active Subscriber")
                    </div>
                </div>
                <div class="separator separator-dashed my-3"></div>
                <div class="pb-5 fs-6">
                    <div class="fw-bold mt-5">Account ID</div>
                    <div class="text-gray-600">ID-@Model.Id</div>

                    <div class="fw-bold mt-5">Mobile No.</div>
                    <div class="text-gray-600">
                        <p>@Model.MobileNumber</p>
                        @if (Model.HasWhatsApp)
                        {
                            <span class="badge badge-light-success">Has WhatsApp</span>
                        }
                    </div>

                    <div class="fw-bold mt-5">National ID</div>
                    <div class="text-gray-600">@Model.NationalId</div>

                    <div class="fw-bold mt-5">Date of Birth</div>
                    <div class="text-gray-600">@Model.DateOfBirth.ToString("dd MMM, yyyy")</div>

                    <div class="fw-bold mt-5">Address</div>
                    <div class="text-gray-600">@Model.Address</div>
                </div>
            </div>
        </div>
    </div>

    <div class="flex-lg-row-fluid ms-lg-15">
        <ul class="nav nav-custom nav-tabs nav-line-tabs nav-line-tabs-2x border-0 fs-4 fw-semibold mb-8" role="tablist">
            <li class="nav-item" role="presentation">
                <a class="nav-link text-active-primary pb-4 active" data-bs-toggle="tab" href="#Subscription" role="tab">Subscription</a>
            </li>
            <li class="nav-item ms-auto" role="presentation">
                @if (Model.IsBlackListed)
                {
                    <button class="btn btn-danger" disabled>
                        <i class="bi bi-x-circle"></i> Banned
                    </button>
                }
                else if (Model.IsDeleted)
                {
                    <button class="btn btn-secondary" disabled>
                        <i class="bi bi-trash"></i> Deleted
                    </button>
                }
                else
                {
                    @if (Model.Subscriptions?.Any(s => s.EndDate >= DateTime.Today) == true)
                    {
                        <a asp-action="Create" asp-controller="Rentals" asp-route-subscriberId="@Model.Id" class="btn btn-primary">
                            <i class="bi bi-plus-circle"></i> Create New Rental
                        </a>
                    }

                }
            </li>
        </ul>

        <div class="tab-pane fade active show" id="Subscription" role="tabpanel">
            <div class="card pt-4 mb-6 mb-xl-9 shadow-sm">
                <div class="card-header bg-light d-flex justify-content-between align-items-center">
                    <h5 class="mb-0 text-dark">Subscription Details</h5>
                    <button id="addSubscriptionBtn" class="btn btn-primary btn-sm">Add New Subscription</button>
                </div>
                <div class="card-body pt-3 pb-5">
                    <table class="table table-bordered table-hover align-middle" id="subscriptionTable">
                        <thead class="table-light text-center">
                            <tr>
                                <th>#</th>
                                <th>Subscription Name</th>
                                <th>Start Date</th>
                                <th>End Date</th>
                                <th>Status</th>
                            </tr>
                        </thead>
                        <tbody>
                            @if (Model.Subscriptions?.Any() == true)
                            {
                                int index = 1;
                                foreach (var subscription in Model.Subscriptions)
                                {
                                    bool isExpired = subscription.EndDate < DateTime.Today;
                                    <tr class="text-center">
                                        <td>@index</td>
                                        <td>@subscription.Name</td>
                                        <td>@subscription.StartDate.ToString("dd MMM yyyy")</td>
                                        <td>@subscription.EndDate.ToString("dd MMM yyyy")</td>
                                        <td>
                                            <span class="badge bg-@(isExpired ? "secondary" : "success")">
                                                @(isExpired ? "Not Active" : "Active")
                                            </span>
                                        </td>
                                    </tr>
                                    index++;
                                }
                            }
                            else
                            {
                                <tr>
                                    <td colspan="5" class="text-center text-muted">No subscriptions found.</td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>

        <!-- تخزين SubscriberId داخل Data Attribute -->
        <div id="subscriptionContainer" data-subscriber-id="@Model.Id"></div>

        @section Scripts
        {
            <script>
                document.addEventListener("DOMContentLoaded", function() {
                    const container = document.getElementById("subscriptionContainer");
                    const subscriberId = container.getAttribute("data-subscriber-id");

                    if (!subscriberId || isNaN(subscriberId) || subscriberId <= 0) {
                        console.error("Error: Invalid subscriber ID detected!");
                        return;
                    }

                    console.log("Subscriber ID:", subscriberId);

                    document.getElementById("addSubscriptionBtn").addEventListener("click", async function() {
                        const tableBody = document.getElementById('subscriptionTable').getElementsByTagName('tbody')[0];
                        const rows = tableBody.rows;
                        const today = new Date();

                        let newStartDate, newEndDate;

                        if (rows.length === 0 || rows[0].cells.length < 4) {
                            newStartDate = new Date();
                            newEndDate = new Date(newStartDate);
                            newEndDate.setMonth(newEndDate.getMonth() + 1);
                        } else {
                            const lastRow = rows[rows.length - 1];
                            const lastEndDateString = lastRow.cells[3]?.innerText?.trim();

                            if (!lastEndDateString) {
                                newStartDate = new Date();
                            } else {
                                newStartDate = new Date(lastEndDateString);
                                newStartDate.setDate(newStartDate.getDate() + 1);
                            }
                            newEndDate = new Date(newStartDate);
                            newEndDate.setMonth(newEndDate.getMonth() + 1);
                        }

                        const options = { day: '2-digit', month: 'short', year: 'numeric' };
                        let startDateFormatted = newStartDate.toLocaleDateString('en-GB', options).replace(/ /g, ' ');
                        let endDateFormatted = newEndDate.toLocaleDateString('en-GB', options).replace(/ /g, ' ');

                        // تحديث جميع الاشتراكات السابقة إلى "Not Active" إذا انتهت صلاحيتها
                        let hasActiveSubscription = false;
                        for (let i = 0; i < rows.length; i++) {
                            const row = rows[i];
                            const endDateString = row.cells[3]?.innerText?.trim();
                            if (endDateString) {
                                const endDate = new Date(endDateString);
                                if (endDate < today) {
                                    row.cells[4].innerHTML = '<span class="badge bg-secondary">Not Active</span>';
                                } else {
                                    hasActiveSubscription = true;
                                }
                            }
                        }

                        // إضافة الصف الجديد
                        const newRow = tableBody.insertRow();
                        newRow.classList.add('text-center');
                        newRow.innerHTML = `
                                <td>${tableBody.rows.length + 1}</td>
                                <td>New Subscription</td>
                                <td>${startDateFormatted}</td>
                                <td>${endDateFormatted}</td>
                                <td><span class="badge bg-success">Active</span></td>
                            `;

                        hasActiveSubscription = true; // لأننا أضفنا اشتراك نشط الآن

                        // تحديث حالة زر "Create New Rental"
                        toggleCreateRentalButton(hasActiveSubscription);

                        try {
                            const response = await fetch('/Subscribers/AddSubscription', {
                                method: 'POST',
                                headers: {
                                    'Content-Type': 'application/json',
                                    'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                                },
                                body: JSON.stringify({
                                    subscriberId: parseInt(subscriberId),
                                    startDate: newStartDate.toISOString(),
                                    endDate: newEndDate.toISOString()
                                })
                            });

                            if (!response.ok) {
                                const errorData = await response.json();
                                throw new Error(errorData.message);
                            }

                            const data = await response.json();
                            if (data.success) {
                                console.log("Subscription added successfully!");
                            } else {
                                console.error("Failed to add subscription:", data.message);
                            }
                        } catch (error) {
                            console.error("Error:", error.message);
                            alert("Failed to add subscription: " + error.message);
                        }
                    });

                    function toggleCreateRentalButton(hasActiveSubscription) {
                        const rentalButton = document.getElementById("createRentalBtn");

                        if (hasActiveSubscription) {
                            if (!rentalButton) {
                                const newButton = document.createElement("a");
                                newButton.id = "createRentalBtn";
                                newButton.href = `/Rentals/Create?subscriberId=${subscriberId}`;
                                newButton.className = "btn btn-primary";
                                newButton.innerHTML = '<i class="bi bi-plus-circle"></i> Create New Rental';
                                document.querySelector(".nav-item.ms-auto").appendChild(newButton);
                            }
                        } else {
                            if (rentalButton) {
                                rentalButton.remove();
                            }
                        }
                    }
                });
            </script>
        }

        <div/>
        <div/>

@* <script>
    function addNewSubscription() {
        const tableBody = document.getElementById('subscriptionTable').getElementsByTagName('tbody')[0];
        const rows = tableBody.rows;

        let newStartDate, newEndDate;

        if (rows.length === 0) {
            // إذا كان الجدول فارغًا، نبدأ بتاريخ اليوم
            newStartDate = new Date(); // تاريخ اليوم
            newEndDate = new Date(newStartDate);
            newEndDate.setMonth(newEndDate.getMonth() + 1); // نهاية الاشتراك بعد شهر
        } else {
            // إذا كان هناك صفوف سابقة، نستخدم endDate للصف الأخير + يوم واحد
            const lastRow = rows[rows.length - 1];
            const lastEndDateString = lastRow.cells[3].innerText;

            newStartDate = new Date(lastEndDateString);
            newStartDate.setDate(newStartDate.getDate() + 1); // نبدأ من اليوم التالي لـ endDate السابق
            newEndDate = new Date(newStartDate);
            newEndDate.setMonth(newEndDate.getMonth() + 1); // نهاية الاشتراك بعد شهر
        }

        // تنسيق التواريخ
        const options = { day: '2-digit', month: 'short', year: 'numeric' };
        let startDateFormatted = newStartDate.toLocaleDateString('en-GB', options).replace(/ /g, ' ');
        let endDateFormatted = newEndDate.toLocaleDateString('en-GB', options).replace(/ /g, ' ');

        // إضافة صف جديد في الجدول
        const newRow = tableBody.insertRow();
        newRow.classList.add('text-center');
        newRow.innerHTML = `
                                <td>${tableBody.rows.length}</td>
                                <td>New Subscription</td>
                                <td>${startDateFormatted}</td>
                                <td>${endDateFormatted}</td>
                                <td><span class="badge bg-success">Active</span></td>
                            `;

        // تحديث حالة جميع الصفوف السابقة إلى "Not Active"
        for (let i = 0; i < tableBody.rows.length - 1; i++) {
            const row = tableBody.rows[i];
            const statusCell = row.cells[4];
            if (statusCell) {
                statusCell.innerHTML = '<span class="badge bg-secondary">Not Active</span>';
            }
        }

        // تجهيز البيانات للإرسال
        const subscriberId = @Model.Id;
        const form = document.createElement('form');
        form.method = 'POST';
        form.action = '/Subscribers/AddSubscription';

        const subscriberIdInput = document.createElement('input');
        subscriberIdInput.type = 'hidden';
        subscriberIdInput.name = 'subscriberId';
        subscriberIdInput.value = subscriberId;
        form.appendChild(subscriberIdInput);

        const startDateInput = document.createElement('input');
        startDateInput.type = 'hidden';
        startDateInput.name = 'startDate';
        startDateInput.value = newStartDate.toISOString();
        form.appendChild(startDateInput);

        const endDateInput = document.createElement('input');
        endDateInput.type = 'hidden';
        endDateInput.name = 'endDate';
        endDateInput.value = newEndDate.toISOString();
        form.appendChild(endDateInput);

        const tokenInput = document.createElement('input');
        tokenInput.type = 'hidden';
        tokenInput.name = '__RequestVerificationToken';
        tokenInput.value = document.querySelector('input[name="__RequestVerificationToken"]').value;
        form.appendChild(tokenInput);

        // إرسال النموذج إلى السيرفر
        document.body.appendChild(form);
        form.submit();
    }
</script>
 *@